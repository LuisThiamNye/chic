(defclass sq.lang.util.Ints2
  [^:pub ^int x1 ^:pub ^int x2])
(defclass sq.lang.util.Ints3
  [^:pub ^int x1 ^:pub ^int x2 ^:pub ^int x3])

(defclass sq.lang.util.TrimRefValueMapLoopRunner
  :interfaces java.lang.Runnable
  #_"A procedure that can be run on a virtual thread
for processing objects of a ReferenceQueue, removing entries
from a java.util.Map where the object is the value.

Uses a blocking infinte loop."
  [^java.lang.ref.ReferenceQueue rq
   ^java.util.Map cache]
  
  (defi run [_]
    (loop []
      (l= ref1 (ji rq remove))
      (l= refs (nw java.util.ArrayList))
      (ji refs add ref1)
      (loop [] ;; batch any available
        (l= ref (ji rq poll))
        (when (not (nil? ref))
          (ji refs add ref)
          (recur)))
      ;; refs are values, so must iterate
      (l= viter (ji (ji cache values) iterator))
      (loop []
        (when (ji viter hasNext)
          (l= v (ji viter next))
          (l= i (ji refs indexOf v))
          (when (<= 0 i)
            (ji refs remove i)
            (ji viter remove))
          (recur)))
      (recur))))

(Refer-Classes
  (java.lang.reflect
    Field Method Modifier))

(defclass sq.lang.util.ClassReflect
  
  (defn find-field ^Field [^Class class ^boolean static? ^String field-name]
    (=: fields (.getDeclaredFields class))
    (loop [i (alength fields)]
      (set! i (- i 1))
      (if (<= 0 i)
        (if (do (=: f (aa fields i))
              (and (.equals field-name (.getName f))
                (= static? (jc Modifier isStatic (.getModifiers f)))))
          f
          (recur i))
        ;; check interfaces
        (do
          (=: interfaces (.getInterfaces class))
          (=: n (alength interfaces))
          (loop [i 0]
            (if (< i n)
              (if (nil? (=: f (jc Self find-field (aa interfaces i)
                                static? field-name)))
                (recur (inc i))
                f)
              ;; check super
              (when (not (.isInterface class))
                (when (not (nil? (=: super (.getSuperclass class))))
                 (jc Self find-field super static? field-name))))))))))

(defclass sq.lang.util.SilentThreadUncaughtExceptionHandler
  :interfaces java.lang.Thread$UncaughtExceptionHandler
  []
  (def ^:pub instance (nw Self))
  (defi uncaughtException [_ ^Thread thread ^Throwable throwable]))


(defclass sq.lang.util.IntRangeIterator
  :interfaces java.util.Iterator
  [^:mut ^int i ^int maximum]
  (hasNext [_] (< i maximum))
  (next [_] (set! i (inc i))))

#_
(defrewrite ->
  [x] x
  [x [y1 & ys]] (y1 x & ys)
  [x y & fs] (-> x (-> y & fs)))
#_
(defrewrite ->>
  [x] x
  [x [& ys]] (& ys x)
  [x y & fs] (->> (->> x y) & fs))
#_
(defrewrite when-some
  [[x v] a] (do (l= x v) (when (not (nil? x)) a))
  [[x v & r] a]
  (when-some [x v] (when-some [& r] a)))
#_
(defrewrite if-some
  [[x v] a b] (do (l= x v) (if (not (nil? x)) a b))
  #_[[x v x2 v2] a ?b]
  )


