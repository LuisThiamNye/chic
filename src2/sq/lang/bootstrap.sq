
(Alias-Classes
  ConcurrentHashMap java.util.concurrent.ConcurrentHashMap
  MHLookup java.lang.invoke.MethodHandles$Lookup)

(Refer-Classes
  (java.lang.reflect
    Field Method Modifier Constructor Executable)
  (java.lang.invoke
    MethodHandle MethodHandles MethodType CallSite SwitchPoint MutableCallSite
    ConstantCallSite)
  (sq.lang.i MethodHandleFinderLk))

; (defclass sq.lang.BootstrapInfoProvider
;   (def ^:pub-pkg map (nw ConcurrentHashMap))
;   (defn ^:pub get [^Object key]
;     (.get map key)))

(defclass sq.lang.InternalDataContainer
  (def map (nw ConcurrentHashMap)))

; (defclass sq.lang.DynCallSiteFallback)

(defclass sq.lang.i.MethodHandleFinderLk
  :tag [:interface]
  (defabstract apply ^MethodHandle
    [^MHLookup lk ^String target-classname ^boolean static?
     ^String method-name ^"[LString;" param-classnames]))

(defclass sq.lang.DynClassMethodCallSite
  :super MutableCallSite
  [^MHLookup lk ^String method-name ^String target-classname ^"[LString;" arg-classnames]
  
  (init [_ ^MHLookup lk' ^String mn ^MethodType type ^String tc ^"[LString;" arg-cns]
    (init-super type)
    (set! lk lk')
    (set! method-name mn)
    (set! target-classname tc)
    (set! arg-classnames arg-cns))
  
  (def ^:priv mh-finder
    (ct MethodHandleFinderLk
      (.get (jf sq.lang.InternalDataContainer :map)
        "methodHandleFinderLk")))
  
  (defi get-fallback [self ^MethodType type]
    (=: lk' (jc MethodHandles lookup))
    (.asType
      (.asCollector
        (.bind lk' self "fallback"
          (jc MethodType methodType
            (jc Class forName "java.lang.Object")
            (jc Class forName "[Ljava.lang.Object;")))
        (jc Class forName "[Ljava.lang.Object;")
        (.parameterCount type))
      type))
  
  (defi ^:priv reset ^void [self]
    (try
      (=: type (.type self))
      (=: target-mh (.asType
                      (.apply mh-finder lk target-classname true
                        method-name arg-classnames)
                      type))
      (=: fallback-mh (.get-fallback self type))
      (=: sw (ct SwitchPoint (.get (jf sq.lang.InternalDataContainer :map)
                               "dynclsSwitchPoint")))
      (.setTarget self (.guardWithTest sw target-mh fallback-mh))
      (catch Exception e
        (throw (nw Error "Failed to reset dynamic callsite" e)))))
  
  (defi fallback ^Object [self ^"[LObject;" args]
    (.reset self)
    (.invokeWithArguments (.getTarget self) args))
  
  (defn ^:pub bsm
    ^CallSite [^MHLookup lk ^String method-name ^MethodType type
               ^String target-classname ^"[LString;" arg-classnames]
    (=: cs (nw Self lk method-name type target-classname arg-classnames))
    (try (.reset cs)
      (catch Throwable e
        (.setTarget cs (.get-fallback cs type))))
    cs)
  )

(defclass sq.lang.DynInstanceMethodCallSite
  :super MutableCallSite
  [^MHLookup lk ^String method-name ^String target-classname ^"[LString;" arg-classnames]
  
  (init [_ ^MHLookup lk' ^String mn ^MethodType type ^String tc ^"[LString;" arg-cns]
    (init-super type)
    (set! lk lk')
    (set! method-name mn)
    (set! target-classname tc)
    (set! arg-classnames arg-cns))
  
  (def ^:priv mh-finder
    (ct MethodHandleFinderLk
      (.get (jf sq.lang.InternalDataContainer :map)
        "methodHandleFinderLk")))
  
  (defi get-fallback [self ^MethodType type]
    (=: lk' (jc MethodHandles lookup))
    (.asType
      (.asCollector
        (.bind lk' self "fallback"
          (jc MethodType methodType
            (jc Class forName "java.lang.Object")
            (jc Class forName "[Ljava.lang.Object;")))
        (jc Class forName "[Ljava.lang.Object;")
        (.parameterCount type))
      type))
  
  (defi ^:priv reset ^void [self]
    (try
      (=: type (.type self))
      (=: target-mh (.asType (.apply mh-finder lk target-classname false
                               method-name arg-classnames)
                      type))
      (=: fallback-mh (.get-fallback self (.type self)))
      (=: sw (ct SwitchPoint (.get (jf sq.lang.InternalDataContainer :map)
                               "dynclsSwitchPoint")))
      (.setTarget self (.guardWithTest sw target-mh fallback-mh))
      (catch Exception e
        (throw (nw Error "Failed to reset dynamic callsite" e)))))
  
  (defi fallback ^Object [self ^"[LObject;" args]
    (.reset self)
    (.invokeWithArguments (.getTarget self) args))
  
  (defn ^:pub bsm
    ^CallSite [^MHLookup lk ^String method-name ^MethodType type
               ^String target-classname ^"[LString;" arg-classnames]
    (=: cs (nw Self lk method-name type target-classname arg-classnames))
    (try (.reset cs)
      (catch Throwable e
        (.setTarget cs (.get-fallback cs type))))
    cs)
  )

;; FIXME too similar to above
(defclass sq.lang.DynConstructorCallSite
  :super MutableCallSite
  [^MHLookup lk ^String target-classname]
  
  (init [_ ^MHLookup lk' ^MethodType type ^String tc]
    (init-super type)
    (set! lk lk')
    (set! target-classname tc))
  
  (def ^:priv class-finder
    (ct java.util.function.BiFunction
      (.get (jf sq.lang.InternalDataContainer :map)
        "classFinderLk")))
  
  (defn method-applicable? ^boolean
    [^"[Ljava.lang.Class;" param-types ^Executable method]
    (=: method-param-types (.getParameterTypes method))
    (and (= (alength method-param-types) (alength param-types))
      (let i (alength param-types)
        (loop []
          (set! i (- i 1))
          (if (<= 0 i)
            (let
              c1 (aa method-param-types i)
              c2 (aa param-types i)
              ;; generous applicability test, as casting may be used
              (if (or (.isAssignableFrom c1 c2)
                    (.isAssignableFrom c2 c1))
                (recur)
                false))
            true)))))
  
  (defn match-ctor ^Constructor [^Class target-class ^"[Ljava.lang.Class;" param-types]
    (=: ctors (.getDeclaredConstructors target-class))
    (=: match (ct Constructor nil))
    (loop [i (- (alength ctors) 1)] ;; TODO accessibility, most specific
      (when (<= 0 i)
        (=: ctor (aa ctors i))
        (when (jc Self method-applicable? param-types ctor)
          (set! match ctor))
        (recur (- i 1))))
    match)
  
  (defi get-fallback [self ^MethodType type]
    (=: lk' (jc MethodHandles lookup))
    (.asType
      (.asCollector
        (.bind lk' self "fallback"
          (jc MethodType methodType
            (jc Class forName "java.lang.Object")
            (jc Class forName "[Ljava.lang.Object;")))
        (jc Class forName "[Ljava.lang.Object;")
        (.parameterCount type))
      type))
  
  (defi ^:priv reset ^void [self]
    (try
      (=: target-class (ct Class (.apply class-finder lk target-classname)))
      (=: type (.type self))
      (=: method (jc Self match-ctor target-class (.parameterArray type)))
      (=: target-mh (.asType (.unreflectConstructor lk method) type))
      (=: lk' (jc MethodHandles lookup))
      (=: fallback-mh (.get-fallback self type))
      (=: sw (ct SwitchPoint (.get (jf sq.lang.InternalDataContainer :map)
                               "dynclsSwitchPoint")))
      (.setTarget self (.guardWithTest sw target-mh fallback-mh))
      (catch Exception e
        (throw (nw Error
                 (.concat "Failed to reset dynamic constructor of "
                   target-classname)
                 e)))))
  
  (defi fallback ^Object [self ^"[Ljava.lang.Object;" args]
    (.reset self)
    (.invokeWithArguments (.getTarget self) args))
  
  (defn ^:pub bsm
    ^CallSite [^MHLookup lk ^String method-name ^MethodType type
               ^String target-classname]
    (=: cs (nw Self lk type target-classname))
    (try (.reset cs)
      (catch Throwable e
        (.setTarget cs (.get-fallback cs type))))
    cs)
  )

(defclass sq.lang.DynGetFieldCallSite
  :super MutableCallSite
  [^MHLookup lk ^String field-name ^String field-classname ^String target-classname]
  
  (init [_ ^MHLookup lk' ^MethodType type ^String name ^String tc ^String fc]
    (init-super type)
    (set! lk lk')
    (set! field-name name)
    (set! target-classname tc)
    (set! field-classname fc))
  
  (def ^:priv class-finder
    (ct java.util.function.BiFunction
      (.get (jf sq.lang.InternalDataContainer :map)
        "classFinderLk")))
  
  (defi get-fallback [self ^MethodType type]
    (=: lk' (jc MethodHandles lookup))
    (.asType
      (.asCollector
        (.bind lk' self "fallback"
          (jc MethodType methodType
            (jc Class forName "java.lang.Object")
            (jc Class forName "[Ljava.lang.Object;")))
        (jc Class forName "[Ljava.lang.Object;")
        (.parameterCount type))
      type))
  
  (defi ^:priv reset ^void [self]
    (=: map (jf sq.lang.InternalDataContainer :map))
    (=: target-class (ct Class (.apply class-finder lk target-classname)))
    (=: field-class (ct Class (.apply class-finder lk field-classname)))
    (=: type (.type self))
    (=: field (jc sq.lang.util.ClassReflect find-field target-class false field-name))
    (=: target-mh (.asType (.unreflectGetter lk field) type))
    (=: fallback-mh (.get-fallback self type))
    (=: sw (ct SwitchPoint (.get (jf sq.lang.InternalDataContainer :map)
                             "dynclsSwitchPoint")))
    (.setTarget self (.guardWithTest sw target-mh fallback-mh)))
  
  (defi fallback ^Object [self ^"[Ljava.lang.Object;" args]
    (.reset self)
    (.invokeWithArguments (.getTarget self) args))
  
  (defn ^:pub bsm
    ^CallSite [^MHLookup lk ^String method-name ^MethodType type
               ^String target-classname ^String field-classname]
    (=: cs (nw Self lk type method-name target-classname field-classname))
    (try (.reset cs)
      (catch Throwable e
        (.setTarget cs (.get-fallback cs type))))
    cs)
  )

(defclass sq.lang.DynSetFieldCallSite
  :super MutableCallSite
  [^MHLookup lk ^String field-name ^String field-classname ^String target-classname]
  
  (init [_ ^MHLookup lk' ^MethodType type ^String name ^String tc ^String fc]
    (init-super type)
    (set! lk lk')
    (set! field-name name)
    (set! target-classname tc)
    (set! field-classname fc))
  
  (def ^:priv class-finder
    (ct java.util.function.BiFunction
      (.get (jf sq.lang.InternalDataContainer :map)
        "classFinderLk")))
  
  (defi get-fallback [self ^MethodType type]
    (=: lk' (jc MethodHandles lookup))
    (.asType
      (.asCollector
        (.bind lk' self "fallback"
          (jc MethodType methodType
            (jc Class forName "java.lang.Object")
            (jc Class forName "[Ljava.lang.Object;")))
        (jc Class forName "[Ljava.lang.Object;")
        (.parameterCount type))
      type))
  
  (defi ^:priv reset ^void [self]
    (=: target-class (ct Class (.apply class-finder lk target-classname)))
    (=: map (jf sq.lang.InternalDataContainer :map))
    (=: target-class (ct Class (.apply class-finder lk target-classname)))
    (=: field-class (ct Class (.apply class-finder lk field-classname)))
    (=: type (.type self))
    (=: field (jc sq.lang.util.ClassReflect find-field target-class false field-name))
    (=: target-mh (.asType (.unreflectSetter lk field) type))
    (=: fallback-mh (.get-fallback self type))
    (=: sw (ct SwitchPoint (.get map "dynclsSwitchPoint")))
    (.setTarget self (.guardWithTest sw target-mh fallback-mh)))
  
  (defi fallback ^Object [self ^"[Ljava.lang.Object;" args]
    (.reset self)
    (.invokeWithArguments (.getTarget self) args))
  
  (defn ^:pub bsm
    ^CallSite [^MHLookup lk ^String method-name ^MethodType type
               ^String target-classname ^String field-classname]
    (=: cs (nw Self lk type method-name target-classname field-classname))
    (try (.reset cs)
      (catch Throwable e
        (.setTarget cs (.get-fallback cs type))))
    cs)
  )

(Alias-Classes
  Enum java.lang.Enum)

(defclass sq.lang.EnumSwitchMapCallSite
  ;; enum->idx
  ; :super MutableCallSite
  ; [^MHLookup lk ^String enum-classname ^"[Ljava.lang.String;" enums]
  
  ; (defn ^:priv make-mh ^MethodHandle
  ;   [^MHLookup lk ^String method-name ^MethodType type
  ;    ^String enum-classname ^"[Ljava.lang.String;" enums]
  ;   )
  
  (defn bsm ^CallSite
    [^MHLookup lk ^String method-name ^MethodType type
     ^String enum-classname ^"[Ljava.lang.Object;" enum-names]
    (=: cs-enum-class (.parameterType type 0))
    (if (.isInterface cs-enum-class)
      nil ;; TODO use dynamic impl
      ;; callsite coupled to runtime enum class
      (do
        (=: enum-class (jc Class forName enum-classname false
                         (.getClassLoader (.lookupClass lk))))
        (=: switchmap (na int (alength (.getEnumConstants enum-class))))
        (loop [i (- (alength enum-names) 1)]
          (when (<= 0 i)
            (=: name (ct String (aa enum-names i)))
            ;; case indexes from 1->n, considering uninitialised 0s in array
            (sa switchmap (.ordinal (jc Enum valueOf enum-class name))
              (+ i 1))
            (recur (- i 1))))
        
        ;; TODO optimise if ordinals = case indexes,
        ;; or constant offset eg 0,1,2 -> 1,2,3
        ;; if in reverse order, negate and offset: 2,1,0->-2,-1,0->1,2,3
        ;; if two non-adjacent contiguous chunks, use 'if' to offset first
        ;; (assuming earlier cases are more frequent, so no branch)
        ;; then offset both: 0,1,4,5->2,3,4,5->1,2,3,4
        ;; thus lookupswitch on 2 cases never needs array
        (nw ConstantCallSite
          (jc MethodHandles collectArguments
            (.bindTo (jc MethodHandles arrayElementGetter (.getClass switchmap))
              switchmap)
            0
            (.findVirtual lk enum-class "ordinal"
              (jc MethodType methodType (jf Integer TYPE)))))))))








