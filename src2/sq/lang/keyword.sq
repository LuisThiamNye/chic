


;; what if rq thread blocks but class is collected?
;; - thread holds ref to refqueue
;; - instances of class may be collected to refqueue
;; -- but may be no instances in first place
;; - could register special token with rq to force termination when collected
;; - but the token's weakreference must be strongly referenced
;; - could register the classloader with a cleaner (preferably shared)

;; special functions
;; install, uninstall (class); init (ctor)

(Require-Classes
  sq.lang.util.TrimRefValueMapLoopRunner
  sq.lang.util.SilentThreadUncaughtExceptionHandler)

(defclass sq.lang.IKeyword
  :tag [:interface]
  :interfaces java.lang.Comparable
  (defabstract getName ^String []))


(defclass sq.lang.Keyword
  :interfaces sq.lang.IKeyword
  [^String string]

  (defi getName [_] string)

  (defi compareTo [self ^Self other]
    (if (== self other)
      0
      (ji string compareTo (jfi other :string))))

  (defi toString [_]
    (ji ":" concat string))
  

  ;; str -> weakreference
  (def ^:priv cache (nw java.util.concurrent.ConcurrentHashMap))
  (def ^:priv refqueue (nw java.lang.ref.ReferenceQueue))
  (def ^:priv rqthread
    (ji (ji (jc java.lang.Thread ofVirtual)
          uncaughtExceptionHandler
          (jf sq.lang.util.SilentThreadUncaughtExceptionHandler :instance))
      start
      (nw sq.lang.util.TrimRefValueMapLoopRunner refqueue cache)))

  ;; up to loader as to if/how this is used
  (uninstall []
    (ji rqthread interrupt))


  (defn from ^Self [^String string]
    (l= ref0 (ct java.lang.ref.Reference
               (ji cache get string)))
    (loop [ref ref0]
      (if (nil? ref)
        (do
          (l= kw (nw Self string))
          (l= existing (ji cache putIfAbsent string
                         (nw java.lang.ref.WeakReference kw refqueue)))
          (if (nil? existing)
            kw
            ;; another kw obj was added in interim
            (recur (ct java.lang.ref.Reference
                     (ji (ct java.lang.ref.Reference existing) get)))))
        (do
          (l= kw (ji ref get))
          (if (nil? kw)
            ;; expired ref
            (do (ji cache remove string ref)
              (recur nil))
            (ct Self kw))))))

  (defn find ^Self [^String string]
    (l= ref (ji cache get string))
    (when (not (nil? ref))
      (ji (ct java.lang.ref.Reference ref) get)))

  )