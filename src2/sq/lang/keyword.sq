


;; what if rq thread blocks but class is collected?
;; - thread holds ref to refqueue
;; - instances of class may be collected to refqueue
;; -- but may be no instances in first place
;; - could register special token with rq to force termination when collected
;; - but the token's weakreference must be strongly referenced
;; - could register the classloader with a cleaner (preferably shared)

;; special functions
;; install, uninstall (class); init (ctor)

(defclass sq.lang.i.Named
  :tag [:interface]
  (defabstract getName ^String []))

(Alias-Classes
  ConcurrentHashMap java.util.concurrent.ConcurrentHashMap)

(defclass sq.lang.Keyword
  :interfaces Comparable sq.lang.i.Named
  [^String string]
  
  ;; str -> weakreference
  (def ^:pub-pkg cache (nw ConcurrentHashMap 2048))

  (defi getName [_] string)

  (defi compareTo [self ^Self other]
    (ji string compareTo (jfi other :string)))

  (defi toString [_]
    (ji ":" concat string))

  )

(Require-Classes
  sq.lang.util.TrimRefValueMapLoopRunner
  sq.lang.util.SilentThreadUncaughtExceptionHandler)

(Alias-Classes
  Keyword sq.lang.Keyword
  Reference java.lang.ref.Reference)

(defclass sq.lang.KeywordMgr
  ;; static component of Keyword; could be merged into Keyword to save bytes
  
  (def ^:priv refqueue (nw java.lang.ref.ReferenceQueue))
  (def ^:priv rqthread
    (ji (ji (jc java.lang.Thread ofVirtual)
          uncaughtExceptionHandler
          (jf sq.lang.util.SilentThreadUncaughtExceptionHandler :instance))
      start
      (nw sq.lang.util.TrimRefValueMapLoopRunner
        refqueue (jf Keyword :cache))))

  ;; up to loader as to if/how this is used
  (uninstall []
    (ji rqthread interrupt))


  (defn from ^Keyword [^String string]
    (=: cache (jf Keyword :cache))
    (=: ref0 (ct Reference
               (.get cache string)))
    (loop [ref ref0]
      (if (nil? ref)
        (do
          (=: kw (nw Keyword string))
          (=: existing (.putIfAbsent cache string
                         (nw java.lang.ref.WeakReference kw refqueue)))
          (if (nil? existing)
            kw
            ;; another kw obj was added in interim
            (recur (ct Reference
                     (.get (ct Reference existing))))))
        (do
          (=: kw (.get ref))
          (if (nil? kw)
            ;; expired ref
            (do (.remove cache string ref)
              (recur nil))
            (ct Keyword kw))))))

  (defn find
    #_"Returns nil if keyword is not interned"
    ^Keyword [^String string]
    (l= ref (ji (jf Keyword :cache) get string))
    (when (not (nil? ref))
      (ct Keyword (ji (ct Reference ref) get))))
  )

(defclass sq.lang.KeywordFactory
  ;; A static target for bootstrap methods
  ;; perhaps move keywordmgr into keywordfactory
  ;; then auto generate named class that dynamically calls hidden impl
  ;; perhaps hidden impl is unnecessary as constantdynamic only calls 'from' once?
  ;; but maybe a problem if condy links the class but lazily calls 'from' later
  (defn from [^String string]
    (^:dynamic jc sq.lang.KeywordMgr from string)))

