
(Refer-Classes
  (sq.repl.eval Eval)
  (sq.lang.util
    Ints2 Maths RopeCharacterIterator EmptyCharacterIterator RopeUtil
    IteratorIterable)
  (io.lacuna.bifurcan Set Map List LinearList Rope IList IMap)
  (java.util ArrayList HashMap LinkedList)
  (java.util.function UnaryOperator Consumer IntBinaryOperator IntConsumer)
  (java.util.concurrent.atomic AtomicReference)
  (java.util.concurrent ConcurrentHashMap)
  (java.nio.file Path Files OpenOption StandardOpenOption LinkOption)
  (java.nio.file.attribute FileAttribute)
  (io.github.humbleui.types IRect Rect RRect IPoint)
  (io.github.humbleui.jwm
    EventMouseButton EventMouseMove EventMouseScroll
    EventKey EventWindowFocusOut App Window EventWindowResize EventTextInput
    EventFrame Platform Event
    EventWindowScreenChange EventWindowClose EventWindowCloseRequest
    MouseButton KeyModifier Key ClipboardFormat ClipboardEntry Clipboard)
  (io.github.humbleui.jwm.skija
    EventFrameSkija LayerD3D12Skija LayerGLSkija LayerMetalSkija)
  (io.github.humbleui.skija
    Canvas Paint PaintMode Font FontWeight FontWidth FontSlant
    TextLine Typeface FontStyle)
  (com.ibm.icu.text BreakIterator)
  (chic.sqeditor
    RectTools UiRoot TextEditor Interactor IntrMgr Buffer View Selection
    Region RegionOps SelectionOps Misc RegionPathOps BreakNav EditorCommit
    TextButtonList BufferOps  Indentation IndentationOps TextEditorOps
    EventHandling StatusBar StatusBarOps TabListBar)
  (chic.sqeditor.i LineOffsetConverter)
  (chic.browser.ui
    ChangeableValue)
  (chic.types SizeWH)
  (chic.sqeditor.ui Label))

(Alias-Classes
  SkPath io.github.humbleui.skija.Path)

(defclass chic.sqeditor.RectTools
  
  (defn contains-point? ^boolean [^Rect rect ^int ix ^int iy]
    (=: x (+ (ct float ix) 0.5f))
    (=: y (+ (ct float iy) 0.5f))
    (and (<= (.getLeft rect) x)
      (<= (.getTop rect) y)
      (< x (.getRight rect))
      (< y (.getBottom rect))))
  
  (defn contains-point? ^boolean [^IRect rect ^int x ^int y]
    (and (<= (.getLeft rect) x)
      (<= (.getTop rect) y)
      (< x (.getRight rect))
      (< y (.getBottom rect))))
  
  (defn withPos ^IRect [^IRect rect ^int x ^int y]
    (IRect/makeLTRB x y (.getWidth rect) (.getHeight rect)))
  
  (defn origin ^IPoint [^IRect rect]
    (nw IPoint (.getLeft rect) (.getTop rect)))
  )

(defclass chic.sqeditor.Misc
  
  (defn cursor->line-idx ^int [^LinearList line-start-idxs ^int cursor-idx]
    (let it (.iterator line-start-idxs)
      (loop [i -1]
        (if (.hasNext it)
          (let lsi (.intValue (ct Integer (.next it)))
            (if (< cursor-idx lsi)
              i
              (recur (inc i))))
          i))))
  )

(defclass chic.sqeditor.BreakNav
  
  (defn make-word-iter ^BreakIterator [^Rope rope]
    (let it (BreakIterator/getWordInstance)
      (do (.setText it (if (= 0 (.size rope))
                         (nw EmptyCharacterIterator)
                         (nw RopeCharacterIterator rope)))
        it)))
  
  (defn make-line-iter ^BreakIterator [^Rope rope]
    (let it (BreakIterator/getLineInstance)
      (do (.setText it (if (= 0 (.size rope))
                         (nw EmptyCharacterIterator)
                         (nw RopeCharacterIterator rope)))
        it)))
  
  (defn word-before ^int [^BreakIterator iter ^int idx0]
    (=: idx (.following iter (dec idx0)))
    (loop []
      (if (< 0 idx)
        (do (=: rs (.getRuleStatus iter)) ;; must be before .previous
          (set! idx (.previous iter))
          (if (or (< rs (jf BreakIterator WORD_NONE))
                (<= (jf BreakIterator WORD_NONE_LIMIT) rs))
            idx
            (recur)))
        0)))
  
  (defn word-after ^int [^BreakIterator iter ^int idx0]
    (let n (.last iter)
      (loop [idx (.following iter idx0)]
        (if (and (<= 0 idx) (not (= n idx)))
          (if (let rs (.getRuleStatus iter)
                ;; if not punctuation/space
                (or (< rs (jf BreakIterator WORD_NONE))
                  (<= (jf BreakIterator WORD_NONE_LIMIT) rs)))
            idx
            (recur (.next iter)))
          n)))))

(defclass chic.sqeditor.i.LineOffsetConverter
  :tag [:interface]
  (defabstract line-xpos->offset ^int [^int line-idx ^int xpos])
  (defabstract line-offset->xpos ^int [^int line-idx ^int offset]))

(defclass chic.sqeditor.EditorCommit
  [^:pub ^Rope rope
   ^:pub ^"[Lchic.sqeditor.Region;" regions]
  (init [_ ^Rope r]
    (set! rope r))
  (init [_ ^Rope r ^"[Lchic.sqeditor.Region;" rs]
    (set! rope r)
    (set! regions rs))
  (init [_ ^Rope r ^LinearList rs]
    (set! rope r)
    (set! regions (ct "[Lchic.sqeditor.Region;" (.toArray rs)))))

(defclass chic.sqeditor.View
  :interfaces AutoCloseable
  [^:pub ^Buffer buffer
   ^:pub ^Selection selection]
  
  (init [_ ^Buffer b]
    (set! buffer b)
    (set! selection (nw Selection)))
  
  ; (defi retarget [_])
  ; (defi dirty? [_])
  
  (defi close ^void [_]))

(defclass chic.sqeditor.StatusBar
  [^:pub ^ChangeableValue *view
   ^:pub ^ChangeableValue *label-text
   ^:pub ^Label ui-label])

(defclass chic.sqeditor.StatusBarOps
  
  (defn make [^ChangeableValue *view]
    (nw StatusBar
      *view
      (nw ChangeableValue nil)
      (nw Label)))
  
  (defn measure ^SizeWH [^StatusBar self ^IMap ctx]
    (=: *label-text (.:*label-text self))
    (if true ;; FIXME
      (do
        (=: view (ct View (.:value (.:*view self))))
        (=: regions (.:regions (.:selection view)))
        (if (< 0 (.size regions))
          (do
            (=: line-num (inc (Misc/cursor->line-idx
                                (.:line-start-idxs (.:buffer view))
                                (.:end (ct Region (.nth regions 0))))))
            (.reset *label-text (.concat "Line " (String/valueOf line-num))))
          (.reset *label-text "-")))
      (.set-unchanged *label-text))
    
    (.measure (.:ui-label self) ctx *label-text))
  
  (defn draw [^StatusBar self ^IMap ctx ^Canvas cnv ^IRect rect]
    (=: origin (RectTools/origin rect))
    (.draw (.:ui-label self) ctx cnv origin)
    
    ;; unsaved indicator
    (=: text-paint (ct Paint (:text-fill ctx)))
    (=: view (ct View (.:value (.:*view self))))
    (when (BufferOps/dirty? (.:buffer view))
      (.setStrokeWidth text-paint 6)
      (.drawPoint cnv (+ (.getX origin) 3) (+ (.getY origin) 3) text-paint)))
  )
  
  ; (defi close-current ^void [self]
  ;   (=: n (.size views))
  ;   (when (and (< 1 n)
  ;           (not (BufferOps/dirty? (jfi view :buffer))))
  ;     (.remove views (dec n))
  ;     (set! view (.get views (- n 2)))
  ;     (.regenerate-textlines! self
  ;       (jfi (jfi view :buffer) :rope))))
  
  
  ; (defi set-view-idx ^void [self ^int idx]
  ;   (set! view (.remove views (- (.size views) idx 1)))  
    ; (.add views view)
    ; (.regenerate-textlines! self (jfi (jfi view :buffer) :rope)))

(defclass chic.sqeditor.UiRoot
  :interfaces AutoCloseable
  [^:mut ^TextEditor ui-child
   ; ^IntrMgr intrmgr
   ; ^:mut ^View view
   ; ^ArrayList views
   ^ChangeableValue *code-font
   ^ChangeableValue *main-font
   ^RRect border-rrect
   ^Paint border-paint-focused
   ^:mut ^IMap ctx
   ^:mut ^IMap editor-ctx
   ^:mut ^StatusBar ui-statusbar
   ^TabListBar ui-tablist
   ^ChangeableValue *view
   ^ArrayList views
   ]
  
  (def code-typeface
    (Typeface/makeFromName "Input Mono"
      (nw FontStyle
        (jf FontWeight NORMAL)
        (jf FontWidth CONDENSED)
        (jf FontSlant UPRIGHT))))
  
  (def main-typeface
    (Typeface/makeFromName "Inter"
      (nw FontStyle
        (jf FontWeight NORMAL)
        (jf FontWidth NORMAL)
        (jf FontSlant UPRIGHT))))
  
  (init [self ^IntrMgr intrmgr' *scale]
    (setf! self :*code-font (nw ChangeableValue nil))
    (setf! self :*main-font (nw ChangeableValue nil))
    (set! border-paint-focused
      (let
        p (nw Paint)
        (do (.setColor p 0x5f000000)
          (.setMode p (jf PaintMode STROKE))
          (.setStrokeWidth p 2f)
          p)))
    (set! ui-child
      (TextEditorOps/make
        (Path/of "src3/home.sq" (na String 0))))
    (=: view (.:view ui-child))
    (setf! self :*view (nw ChangeableValue view))
    (setf! self :views (nw ArrayList))
    (.add views view)
    
    (setf! self :ui-statusbar
      (StatusBarOps/make *view))
    (setf! self :ui-tablist
      (nw TabListBar))
    (setf! self :ctx
      {;:intrmgr (nw ChangeableValue intrmgr)
       :typeface (nw ChangeableValue main-typeface)
       :scale *scale
       :text-fill (nw Paint)
       :hovered-bg-fill (let p (nw Paint)
                          (do (.setColor p 0x0A000000)))
       :pressed-bg-fill (let p (nw Paint)
                          (do (.setColor p 0x20000000)))}))
  
  (def code-font-size 14f)
  (def main-font-size 14f)
  
  (def sidebar-width 180)
  
  (defi draw [self ^IRect rect ^Canvas cnv]
    ; (=: *typeface (ct ChangeableValue (:typeface ctx)))
    (=: *scale (ct ChangeableValue (:scale ctx)))
    (=: scale (ct float (.:value *scale)))
    (if (or (.:changed *scale))
      (let
        (do
          (let
            code-font' (nw Font code-typeface
                         (* code-font-size scale))
            (.reset *code-font code-font'))
          (let
            main-font' (nw Font main-typeface
                         (* main-font-size scale))
            (.reset *main-font main-font'))))
      (do
        (.set-unchanged *code-font)
        (.set-unchanged *main-font)))
    
    (.reset-diff *view (.:view ui-child))
    
    (=: ctx (.put ctx :font *main-font))
    
    ;; tab list
    (=: tablist-rect (.withWidth rect (ct int (* scale sidebar-width))))
    (.draw ui-tablist ctx cnv tablist-rect views)
    
    (=: rhs-rect (.withLeft rect (.getRight tablist-rect)))
    
    ;; statusbar
    (=: statusbar-size (StatusBarOps/measure ui-statusbar ctx))
    (StatusBarOps/draw ui-statusbar ctx cnv
      (.withHeight rhs-rect (.:height statusbar-size)))
    
    ;; text editor
    (=: ctx (.put ctx :font *code-font))
    (setf! self :editor-ctx ctx)
    (=: texteditor-rect
      (.withTop rhs-rect (+ (.getTop rhs-rect) (.:height statusbar-size))))
    (TextEditorOps/draw ui-child ctx cnv texteditor-rect)
    
    ;; border
    (=: border-rrect (.withRadii (.toRect texteditor-rect) (* scale 1f)))
    (.drawRRect cnv border-rrect border-paint-focused)
    )
  
  (defi select-view ^void [self ^View view']
    (.reset (.:*view self) view')
    (=: existing-idx (.indexOf views view'))
    (when (<= 0 existing-idx)
      (.remove views existing-idx))
    (.add views view')
    (TextEditorOps/reset-view! ui-child editor-ctx view'))
  
  (defi navigate-from-region ^void [self]
    (=: view (ct View (.:value *view)))
    (=: nav-loc (SelectionOps/combined-regions-str
                  (.:selection view) (.:rope (.:buffer view))))
    (=: path (java.nio.file.Path/of
               (-> "src3/"
                 (.concat nav-loc)
                 (.concat ".sq"))
              (na String 0)))
    (=: buffer' (nw Buffer))
    (.set-path buffer' path)
    (=: view' (nw View buffer'))
    (SelectionOps/add (.:selection view') (nw Region 0 0))
    (when (Files/exists path (na LinkOption 0))
      (try
        (.reload buffer')
        (catch java.io.IOException e
          (.println (jf System out) "Could not load file")
          (.println (jf System out) e))))
    (.select-view self view'))
  
  (defi event ^boolean [self ^Event evt]
    (=: tl-change? false)
    (let res (ct IMap (.event ui-tablist evt views))
      (when (not (nil? res))
        (<-
          (if (== :activate (:action res))
            (let view (ct View (:view res))
              (do
                (.select-view self view)
                (set! tl-change? true))))
          nil)))
    (=: action-fn
      (reify Consumer
        (accept ^void [_ k]
          (nil? evt)
          (<-
            (if (== k :navigate-to-region)
              (.navigate-from-region self))
            nil))))
    (=: te-change? (EventHandling/event ui-child action-fn evt))
    (or te-change? tl-change?))
  
  (defi close ^void [_]
    (.close ui-child))
  )

(defclass chic.sqeditor.Window
  :interfaces chic.window.i.PaintAndEventHandler AutoCloseable
  [^:mut ^Window jwm-window
   ^:mut ^Rect content-rect
   ^:mut ^ChangeableValue *scale
   ^:mut ^int mouse-x
   ^:mut ^int mouse-y
   ^IntrMgr intrmgr
   ^:mut ^UiRoot root]
  
  (defi reset-root [_]
    (set! root (nw UiRoot intrmgr *scale)))
  
  (init [self]
    (set! intrmgr (nw IntrMgr))
    (set! *scale (nw ChangeableValue nil))
    (.reset-root self))
  
  (defi set-window [_ ^Window jwin]
    (set! jwm-window jwin)
    (.setTitle jwin "Squawk")
    (.reset *scale (.getScale (.getScreen jwin)))
    ; (.setWindowSize - - -)
    ; (.setWindowPosition - - -)
    )
  
  (defi paint ^void [self ^Canvas cnv]
    (.clear cnv 0xFFffffff)
    (try (.draw root (RectTools/withPos (.getContentRect jwm-window) 0 0) cnv)
      (catch ClassCastException e
        (try (.close (ct AutoCloseable root))
          (catch Throwable _))
        (.reset-root self)
        (throw e))))
  
  (defi notifyEvent ^void [self ^Event evt]
    (when
      (<-
        ; (if (instance? EventMouseMove evt)
        ;   (do (set! mouse-x (.getX (ct EventMouseMove evt)))
        ;     (set! mouse-y (.getY (ct EventMouseMove evt)))
        ;     true))
        ; (if (instance? EventKey evt)
        ;   (let evt (ct EventKey evt)
        ;     (if (.isPressed evt)
        ;       (.handle-keydown intrmgr evt)
        ;       (.handle-keyup intrmgr evt))))
        ; (if (instance? EventTextInput evt)
        ;   (let evt (ct EventTextInput evt)
        ;     (.handle-textinput intrmgr evt)))
        (if (instance? EventWindowResize evt)
          (let cr (.getContentRect jwm-window)
            (do
              (set! content-rect (Rect/makeLTRB 0 0 (.getRight cr) (.getBottom cr)))
              ;; EventWindowScreenChange does not run for moving windows between screens
              (.reset-diffeq *scale (.getScale (.getScreen jwm-window)))
              true)))
        ; (if (instance? EventMouseScroll evt)
        ;   (.handle-mousescroll intrmgr (ct EventMouseScroll evt)))
        ; (if (instance? EventMouseButton evt)
        ;   (let evt (ct EventMouseButton evt)
        ;     (if (.isPressed evt)
        ;       (.handle-mousedown intrmgr evt)
        ;       (.handle-mouseup intrmgr (ct EventMouseButton evt)))))
        (if (instance? EventWindowScreenChange evt)
          (do (.reset *scale (.getScale (.getScreen jwm-window)))
            true))
        (if (instance? EventWindowCloseRequest evt)
          (do (.close jwm-window)
            false))
        (if (instance? EventWindowClose evt)
          (do (.close self)
            false))
        (if (instance? EventFrame evt) false)
        ; false
        (try (.event root evt)
          (catch ClassCastException e
            (try (.close (ct AutoCloseable root))
              (catch Throwable _))
            (.reset-root self)
            (throw e))))
      (.requestFrame jwm-window)))
  
  (defi close ^void [self]
    (jc chic.window.Main unreg-window! self)
    (.close root))
  
  (defn spawn []
    (=: self (nw Self))
    (let jwin (jc chic.window.Main new-jwm-window)
      (try
        (.set-window self jwin)
        (.setEventListener jwin (nw chic.window.StdWinEventListener self))
        ;(.setWindowPosition jwin -1800 50)
        (.setWindowSize jwin 900 600)
        (.setVisible jwin true)
        (.focus jwin)
        (jc chic.window.Main reg-window! self)
        (catch Throwable e
          (.close jwin)
          (jc chic.window.Main unreg-window! self)
          (throw e)))))
  )





"
UI Components: ideally one component per potentially unique lifetime
"