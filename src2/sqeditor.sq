
(Refer-Classes
  (sq.lang.util Ints2)
  (io.lacuna.bifurcan Set Map List LinearList Rope)
  (java.util ArrayList)
  (java.util.function
    UnaryOperator)
  (java.util.concurrent.atomic
    AtomicReference)
  (java.util.concurrent
    ConcurrentHashMap)
  (io.github.humbleui.types Rect RRect)
  (io.github.humbleui.jwm
    EventMouseButton EventMouseMove EventMouseScroll
    EventKey EventWindowFocusOut App Window EventWindowResize EventTextInput
    EventFrame Platform Event
    EventWindowScreenChange EventWindowClose EventWindowCloseRequest)
  (io.github.humbleui.jwm.skija
    EventFrameSkija LayerD3D12Skija LayerGLSkija LayerMetalSkija)
  (io.github.humbleui.skija
    Canvas Paint PaintMode Font TextLine Typeface)
  (chic.sqeditor
    RectTools UiRoot TextEditor Interactor IntrMgr Buffer View Selection))

(defclass chic.sqeditor.RectTools
  
  (defn contains-point? ^boolean [^Rect rect ^int ix ^int iy]
    (=: x (+ (ct float ix) 0.5f))
    (=: y (+ (ct float iy) 0.5f))
    (and (<= (.getLeft rect) x)
      (<= (.getTop rect) y)
      (< x (.getRight rect))
      (< y (.getBottom rect))))
  )

(defclass chic.sqeditor.Interactor
  [^Rect rect]
  (defi getRect [_] rect)
  (defi handle-mousescroll ^void [_ ^EventMouseScroll evt])
  (defi handle-mousedown ^void [_ ^EventMouseButton evt])
  (defi handle-mouseup ^void [_ ^EventMouseButton evt])
  )

(defclass chic.sqeditor.IntrMgr
  [^ArrayList intrs]
  
  (defi handle-mousescroll ^boolean [_ ^EventMouseScroll evt]
    (=: it (.iterator intrs))
    (loop []
      (when (.hasNext it)
        (let
          intr (ct Interactor (.next it))
          rect (.getRect intr)
          _handled? (when (jc RectTools contains-point?
                            rect (.getX evt) (.getY evt))
                      (do (.handle-mousescroll intr evt) nil))
          (recur))))
    true)
  
  (defi handle-mousedown ^boolean [_ ^EventMouseButton evt]
    (=: it (.iterator intrs))
    (loop []
      (when (.hasNext it)
        (let
          intr (ct Interactor (.next it))
          rect (.getRect intr)
          _handled? (when (jc RectTools contains-point?
                            rect (.getX evt) (.getY evt))
                      (do (.handle-mousedown intr evt) nil))
          (recur))))
    true)
  
  (defi handle-mouseup ^boolean [_ ^EventMouseButton evt]
    (=: it (.iterator intrs))
    (loop []
      (when (.hasNext it)
        (let
          intr (ct Interactor (.next it))
          rect (.getRect intr)
          _handled? (when (jc RectTools contains-point?
                            rect (.getX evt) (.getY evt))
                      (do (.handle-mouseup intr evt) nil))
          (recur))))
    true)
  )

(defclass chic.sqeditor.Buffer
  [^:pub ^:mut ^Rope rope
   ^:pub ^LinearList newline-idxs]
  (init [_ ^Rope r]
    (set! rope r)

    (=: nli (nw LinearList))
    (=: it (.codePoints rope))
    (loop [i 0]
      (when (.hasNext it)
        (=: ich (.nextInt it))
        (when (= 10 ich)
          (.addLast nli (jc Integer valueOf i)))
        (recur (inc i))))
    (set! newline-idxs nli)))

(defclass chic.sqeditor.Selection
  [^:pub ^LinearList regions]
  (init [_]
    (set! regions (nw LinearList)))
  (defi add ^void [_ ^Ints2 region]
    (.addLast regions region))
  (defi clear ^void [_]
    (.clear regions))
  )

(defclass chic.sqeditor.View
  :interfaces AutoCloseable
  [^:pub ^Buffer buffer
   ^:pub ^Selection selection]
  
  (init [_ ^Buffer b]
    (set! buffer b)
    (set! selection (nw Selection)))
  
  ; (defi retarget [_])
  ; (defi dirty? [_])
  
  (defi close ^void [_]))

(defclass chic.sqeditor.TextEditor
  :interfaces AutoCloseable
  [^RRect border-rrect
   ^Paint border-paint-focused
   ^View view
   ^LinearList textlines
   ^:mut ^int line-height
   ^:mut ^int plane-origin-x
   ^:mut ^int plane-origin-y]
  
  (init [self]
    (set! border-paint-focused
      (let p (nw Paint)
        (do (.setColor p 0x5f000000)
          (.setMode p (jf PaintMode STROKE))
          (.setStrokeWidth p 2f)
          p)))
    (=: rope (jc Rope from "Hello world\nMy name is\nThomas the tank\n"))
    (=: buffer (nw Buffer rope))
    (=: view' (nw View buffer))
    (set! view view')
    (.add (jfi view' :selection) (nw Ints2 0 0))
    
    (=: font (nw Font (jc Typeface makeFromFile "/Volumes/Carbonator/csync/fonts/Input-Font/Input_Fonts/InputSans/InputSansCondensed/InputSansCondensed-Regular.ttf")
               20f))
    (set! line-height (jc Math round (.getSpacing font)))
    (=: newline-idxs (jfi buffer :newline-idxs))
    (=: textlines' (nw LinearList (inc (ct int (.size newline-idxs)))))
    (=: it (.iterator newline-idxs))
    (loop [prev-i 0]
      (when (.hasNext it)
        (=: i (.intValue (ct Integer (.next it))))
        (.addLast textlines'
          (jc TextLine make
            (.toString (.slice rope prev-i i)) font))
        (recur (inc i))))
    (set! textlines textlines'))
  
  (defi draw-text [self ^Rect rect ^Canvas cnv]
    (=: text-paint (nw Paint))
    (.setColor text-paint 0xFF000000)
    (=: it (.iterator textlines))
    (loop [y (+ line-height plane-origin-y)]
      (when (.hasNext it)
        (.drawTextLine cnv (ct TextLine (.next it))
          (ct float plane-origin-x) (ct float y) text-paint)
        (recur (+ y line-height)))))
  
  (defi draw-selection-region [self ^Ints2 region ^Canvas cnv]
    (=: extra-v (jc Math round (* 0.12f (ct float line-height))))
    (=: line-idx 0)
    (=: line-top (+ (* line-idx line-height) plane-origin-y))
    (=: cursor-paint (nw Paint))
    (.setColor cursor-paint 0xE0007ACC)
    (.drawRect cnv (jc Rect makeLTRB
                     0f (- line-top extra-v)
                     2f (+ line-top extra-v))
      cursor-paint))
  
  (defi draw ^void [self ^Rect rect ^Canvas cnv]
    (set! plane-origin-x (+ 5 (jc Math round (.getLeft rect))))
    (set! plane-origin-y (+ 2 (jc Math round (.getTop rect))))
    (.draw-text self rect cnv)
    
    (=: it (.iterator (jfi (jfi view :selection) :regions)))
    (loop []
      (when (.hasNext it)
        (=: region (ct Ints2 (.next it)))
        (.draw-selection-region self region cnv)
        (recur)))
    (=: border-rrect (.withRadii rect 2f))
    (.drawRRect cnv border-rrect border-paint-focused))
  
  (defi close ^void [_])
  )

(defclass chic.sqeditor.UiRoot
  :interfaces AutoCloseable
  [^TextEditor texteditor]
  
  (init [self]
    (set! texteditor (nw TextEditor)))
  
  (defi draw [self ^Canvas cnv]
    ;; TODO 5 padding
    (=: texteditor-rect (nw Rect 5f 5f 400f 250f))
    (.draw texteditor texteditor-rect cnv))
  ;; 200-wide sidebar
  ;; address bar
  ;; text box
  
  (defi close ^void [_]
    (.close texteditor))
  )

(defclass chic.sqeditor.Window
  :interfaces chic.window.i.PaintAndEventHandler AutoCloseable
  [^:mut ^Window jwm-window
   ^:mut ^Rect content-rect
   ^:mut ^float scale
   ^:mut ^int mouse-x
   ^:mut ^int mouse-y
   ^IntrMgr intrmgr
   ^UiRoot root]
  
  (init [_]
    (set! root (nw UiRoot)))
  
  (defi set-window [_ ^Window jwin]
    (set! jwm-window jwin)
    (.setTitle jwin "Squawk")
    (set! scale (.getScale (.getScreen jwin)))
    ; (.setWindowSize - - -)
    ; (.setWindowPosition - - -)
    )
  
  (defi paint ^void [_ ^Canvas cnv]
    (.clear cnv 0xFFffffff)
    (.draw root cnv))
  
  (defi notifyEvent ^void [self ^Event evt]
    (when
      (<-
        (if (instance? EventMouseMove evt)
          (do (set! mouse-x (.getX (ct EventMouseMove evt)))
            (set! mouse-y (.getY (ct EventMouseMove evt)))
            true))
        (if (instance? EventWindowResize evt)
          (let cr (.getContentRect jwm-window)
            (set! content-rect (jc Rect makeLTRB 0 0 (.getRight cr) (.getBottom cr)))
            true))
        (if (instance? EventMouseScroll evt)
          (.handle-mousescroll intrmgr (ct EventMouseScroll evt)))
        (if (instance? EventMouseButton evt)
          (let evt (ct EventMouseButton evt)
            (if (.isPressed evt)
              (.handle-mousedown intrmgr evt)
              (.handle-mouseup intrmgr (ct EventMouseButton evt)))))
        (if (instance? EventWindowScreenChange evt)
          (do (set! scale (.getScale (.getScreen jwm-window)))
            true))
        (if (instance? EventWindowCloseRequest evt)
          (do (.close jwm-window)
            false))
        (if (instance? EventWindowClose evt)
          (do (.close self)
            false))
        false)
      (.requestFrame jwm-window)))
  
  (defi close ^void [self]
    (jc chic.window.Main unreg-window! self)
    (.close root))
  
  (defn spawn []
    (=: self (nw Self))
    (let jwin (jc chic.window.Main new-jwm-window)
      (try
        (.set-window self jwin)
        (.setEventListener jwin (nw chic.window.StdWinEventListener self))
        (.setWindowPosition jwin -1800 50)
        (.setVisible jwin true)
        (.focus jwin)
        (jc chic.window.Main reg-window! self)
        (catch Throwable e
          (.close jwin)
          (jc chic.window.Main unreg-window! self)
          (throw e)))))
  )





"
UI Components: ideally one component per potentially unique lifetime
"