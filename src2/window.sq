
(Refer-Classes
  (io.lacuna.bifurcan Set Map List)
  (java.util.function
    UnaryOperator)
  (java.util.concurrent.atomic
    AtomicReference)
  (java.util.concurrent
    ConcurrentHashMap)
  (io.github.humbleui.jwm
    EventMouseButton EventMouseMove EventMouseScroll
    EventKey EventWindowFocusOut App Window EventWindowResize EventTextInput
    EventFrame Platform Event EventWindowClose EventWindowCloseRequest)
  (io.github.humbleui.jwm.skija
    Canvas EventFrameSkija LayerD3D12Skija LayerGLSkija LayerMetalSkija))

(defclass chic.window.i.PaintAndEventHandler
  :tag [:interface]
  (defabstract paint ^void [^Canvas cnv])
  (defabstract notifyEvent ^void [^Event evt]))

(defclass chic.window.StdWinEventListener
  :interfaces java.util.function.Consumer
  [^chic.window.i.PaintAndEventHandler handler]
  (defi accept [_ evt]
    (if (instance? EventFrameSkija evt)
      (let
        cnv (.getCanvas (.getSurface evt))
        n (.save cnv)
        (try (.paint handler cnv)
          (catch Throwable e
            (.printStackTrace e))
          (finally
            (.restoreToCount cnv n))))
      (.notifyEvent handler evt))))

(defclass chic.window.Main
  
  (def pkgmap (ct ConcurrentHashMap (.get (jf sq.lang.GlobalCHM map) "chic.window")))
  
  (defn new-jwm-window []
    (.setLayer (jc App makeWindow)
      (case-enum (jf Platform CURRENT)
        WINDOWS (nw LayerD3D12Skija)
        MACOS (nw LayerMetalSkija)
        X11 (nw LayerGLSkija)
        (throw (nw RuntimeException "Unsupported platform")))))
  
  (defn reg-window! ^void [win]
    (.updateAndGet (ct AtomicReference (.get pkgmap "windows"))
      (reify UnaryOperator
        (apply [_ set]
          (.add (ct Set set) win)))))
  
  (defn unreg-window! ^void [win]
    (.updateAndGet (ct AtomicReference (.get pkgmap "windows"))
      (reify UnaryOperator
        (apply [_ set]
          (.remove (ct Set set) win)))))
  )

"Switching on Enum
java creates synthetic class for enum to contain array mapping ordinal->case-idx
which is used for tableswitch - because you may switch on a subset of enums.
SwitchMap array is same length as number of enums. It is initialised by
accessing the enum fields, and getting the ordinals at runtime.
By contrast, the switch's case indexes are statically embedded in bytecode.
Therefore, this strategy ensures binary compatibility if enums are
added or reordered.

Incidentally, this could work well for a dynamic system, by resetting the
switchmap array (unless stable annotation is used?)

Also: There's a values() method on the enum (not an interface) - array of all values
that returns the synthetic field $VALUES.

Lookup switch is used for 2 or fewer cases (+ default), tableswitch for 3+ cases.

Enum ordinals appear determined by alphametical order

"